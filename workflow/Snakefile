#### ----------------------- Imports ----------------------- ####

import pandas as pd 
from os.path import join

#### -------------------- Configuration -------------------- ####

configfile: "config.yml"

#### ------------------------ Input ------------------------ ####

# Read in the barcode runs 
barcode_runs = pd.read_csv(config["barcode_runs"])

# Check for the necessary columns
required_columns = {
    "library",
    "standard_set",
    "fastq",
}
required_columns.update(config["id_columns"])
missing_columns = required_columns - set(barcode_runs.columns)
if missing_columns:
    raise ValueError(
        f"The following columns must exist in the `barcode_runs` dataframe: {list(missing_columns)}"
    )

# Make the 'sample' column using the id columns
if "sample" in barcode_runs.columns:
    raise ValueError(
        f"The `barcode_runs` dataframe already has a column called 'sample', please rename the column or remove it."
    )
barcode_runs["sample"] = barcode_runs[config["id_columns"]].apply(
    lambda x: "-".join(x.astype(str)), axis=1
)

# Check that the sample names are unique
if len(barcode_runs["sample"].unique()) != len(barcode_runs):
    raise ValueError(f"The sample names derived from the provided id columns are not unique.")


# Get a list of the sample names
samples = barcode_runs["sample"].unique().tolist()

#### ----------------------- Targets ----------------------- ####

rule all:
    input: 
        expand(join(config["barcode_counts_dir"], "{sample}", "{sample}_counts.csv"), sample = samples)

#### ------------------------ Rules ------------------------ ####

rule clean:
    shell:
        """
        rm -rf logs/
        rm -rf tmp/
        rm -f slurm*.out
        """


rule count_barcodes:
    """Count barcodes for each sample."""
    input:
        fastq=lambda wildcards: barcode_runs.set_index("sample").at[wildcards.sample, "fastq"],
        variants=config["strain_to_barcode"],
        standards=config["neut_standards"],
    output:
        counts=join(config["barcode_counts_dir"], "{sample}", "{sample}_counts.csv"),
        invalid=join(config["barcode_counts_dir"], "{sample}", "{sample}_invalid.csv"),
        fates=join(config["barcode_counts_dir"], "{sample}", "{sample}_fates.csv"),
    params:
        library=lambda wildcards: barcode_runs.set_index("sample").at[wildcards.sample, "library"],
        standard_set=lambda wildcards: barcode_runs.set_index("sample").at[wildcards.sample, "standard_set"],
        parser_params=config["illumina_barcode_parser_params"]
    conda:
        "envs/count_barcodes.yml"
    log:
        join(config["barcode_counts_dir"], "{sample}", "count_barcodes.log")
    script:
        "scripts/count_barcodes.py"